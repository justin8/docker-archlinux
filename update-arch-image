#!/bin/bash
docker_name="justin8/archlinux:$(date +%Y.%m)"
script=$(mktemp)

function add_command() {
	command="$1"
	sed -i "/# udev/s|^|arch-chroot \$ROOTFS $command\n|" $script
}

function get_script() {
	svn export --force https://github.com/docker/docker/trunk/contrib/mkimage-arch.sh "$script" > /dev/null

	# Set a trap after rootfs creation to cleanup if there is any errors to prevent filling temp
	sed -i '/ROOTFS=/s/$/\ntrap "rm -rf $ROOTFS" SIGINT SIGTERM/' "$script"
	# Change imported image name/tag
	sed -i "s|import - archlinux|import - $docker_name|" "$script"
	# Change test to run on new image name/tag
	sed -i "s|-t archlinux|-n arch_test -t $docker_name|" "$script"
	# Remove the test instance after completion
	sed -i '/docker run/s/$/\ndocker rm arch_test/' "$script"
}

if [[ $EUID -ne 0 ]]
then
	echo "You must run this as root!"
	exit 1
fi

set -e
get_script
add_command "curl -sO https://repo.dray.be/dray-repo-latest"
add_command "pacman -U --noconfirm dray-repo-latest"
add_command 'sed -i "s/^CheckSpace/#CheckSpace/" /etc/pacman.conf'
set +e

bash -x "$script"
rc=$?

# Cleanup here regardless to allow exiting on failure in script
docker rm arch_test

rm -f "$script"
if [[ $rc -eq 0 ]]
then
	echo "new_version=$docker_name"
else
	exit 1
fi
