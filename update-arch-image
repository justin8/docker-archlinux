#!/bin/bash
set -e

temp_docker_name="$(mktemp -u 'justin8/archlinux_temp_XXXXXXXXXX' | tr '[:upper:]' '[:lower:]')"
docker_name="justin8/archlinux"
tag="$(date +%Y.%m)"
script=$(mktemp)

cd "$(dirname "$(readlink -f "$0")")"

cleanup() {
	rm "$script"
	docker rmi -f "$temp_docker_name" &> /dev/null
}

add_chroot_command() {
	local command="$1"
	sed -i "/# udev/s|^|arch-chroot \$ROOTFS $command\n|" "$script"
}

add_raw_command() {
	local command="$1"
	sed -i "/# udev/s|^|$command\n|" "$script"
}

check_package_available() {
	if ! which $1 &>/dev/null; then
		pacman -Sy --noconfirm $2 >&2
	fi
}

get_script() {
	svn export --force https://github.com/docker/docker/trunk/contrib/mkimage-arch.sh "$script" > /dev/null

	# Set a trap after rootfs creation to cleanup if there is any errors to prevent filling temp
	sed -i '/ROOTFS=/s/$/\ntrap "rm -rf $ROOTFS" SIGINT SIGTERM/' "$script"
	# Change imported image name/tag
	sed -i "s|DOCKER_IMAGE_NAME=archlinux|DOCKER_IMAGE_NAME=$temp_docker_name:latest|" "$script"
	# Change test to run on new image name/tag
	sed -i "s|-t archlinux|--rm -t $temp_docker_name:latest|" "$script"
	# Change to use gcc-libs-multilib
	base_packages="$(pacman -Sgq base | grep -v gcc-libs) gcc-libs-multilib"
	base_packages=${base_packages//$'\n'/ }
	sed -i "s/\bbase\b/$base_packages/" "$script"

}

trap cleanup EXIT SIGINT SIGQUIT SIGTERM

# Run inside of docker if we aren't already
if ! which pacman &>/dev/null; then
	docker pull justin8/archlinux
	docker run --rm --privileged -v /tmp/pacman-cache:/var/cache/pacman/pkg -v /var/run/docker.sock:/var/run/docker.sock -v "$PWD:/build" justin8/archlinux bash -x "/build/$(basename "$0")"
	exit $?
fi


check_package_available docker docker
check_package_available svn svn
check_package_available pacstrap arch-install-scripts
check_package_available expect expect

get_script

add_raw_command 'cp mkimage-arch-pacman.conf $ROOTFS/etc/pacman.conf'
add_raw_command "echo $tag > \$ROOTFS/version"
add_chroot_command 'dirmngr </dev/null'

bash -x "$script" >&2

echo "Tagging as '$docker_name:$tag'" >&2
docker tag "$temp_docker_name:latest" "$docker_name:$tag" >&2

# Push if told to
if [[ $1 == push ]]
then
	echo "Tagging as '$docker_name:latest'" >&2
	docker tag "$docker_name:$tag" "$docker_name:latest" >&2
	echo "Pushing to repository..." >&2
	docker push "${docker_name}:latest" >&2
	docker push "${docker_name}:$tag" >&2
fi

echo "new_version=$docker_name:$tag"
